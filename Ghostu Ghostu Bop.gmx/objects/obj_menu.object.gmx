<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -10
/* width and height of the window */
width = 0
height = 0

/* number of entries */
numEntries = 0
visisbleEntries = 0

/* array of obj_menuentry objects */
menuEntry[0] = 0

/* whether this is the top menu, i.e., where our cursor is */
inFocus = true

/* this is the object id of a parent menu, if this is a submenu*/
parentID = -1



/* THESE ARE AUTOMATICALLY SET */
/* Spacing between entries */
menuSpace = 25;
menuEntryStartY = y+.5*menuSpace

//which entry is currently selected
entrySelected = 0

arrowx = -1;
arrowy = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //Destroy our menu entries
    for(var i = 0; i &lt; numEntries; i++){
        with(menuEntry[i])
            instance_destroy()
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* Only draw if we have entries and are inFocus */
if(inFocus &amp;&amp; numEntries &gt; 0){
       
/* This sets the text help box. Note that if it's empty, or we're not in battle
        this does nothing */

//draw the help text

    if(instance_exists(obj_battle_help_box))
        {
            obj_battle_help_box.text = menuEntry[entrySelected].battleHelpText
        }
        
    
    if(keyboard_check_pressed(vk_enter))
    {
            
            audio_play_sound(soundbeat,10,0)
            if(script_exists(menuEntry[entrySelected].script)){
                script_execute(menuEntry[entrySelected].script,menuEntry[entrySelected].scriptParams,menuEntry[entrySelected].numScriptParams)
            }
    }
    if(keyboard_check_pressed(vk_up))
    {
        entrySelected -= 1;
        audio_play_sound(snd_select,10,0)
    }
    if(keyboard_check_pressed(vk_down)) 
    {
        entrySelected += 1;
        audio_play_sound(snd_select,10,0)
    }
    if(keyboard_check_pressed(vk_shift))
    {
        script_execute(scr_spawn_selectmenu);
        audio_play_sound(snd_select,10,0);
    }
    //This handles wraparound
    if(entrySelected &lt; 0)
        entrySelected = numEntries-1
        //Technically this should do it alone, but GameMaker doesn't
        //handle modulus of negative numbers properly
    entrySelected = entrySelected mod numEntries
    
    arrowy = menuEntry[entrySelected].y + .5*menuSpace + 3
    arrowx = x+width*.185
    
        
}
if(keyboard_check_pressed(vk_escape))
    { 
    //return to the parent menu

    //Check to see if we have focus, and if we have a parent
        if(inFocus and parentID &gt; -1)
        {
    //Give my parent focus
            audio_play_sound(snd_back,10,0)
            parentID.inFocus = true
    
    //Kill myself
            instance_destroy()
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//and now were going to draw the bmenu//
draw_set_font(f_menuW)//set's a font

/*I moved all the programming that isn't drawing out of here as it should be. You had it duplicated anyway. */

menubox = draw_sprite_stretched(spr_menu,0,x,y,width,height);

for (i = 0; i &lt;  numEntries; i++)
{
    if (inFocus)
    { 
        draw_text_color(menuEntry[i].x+2,menuEntry[i].y+2,menuEntry[i].txt,c_black,c_black,c_black,c_black,1)
        draw_text_color(menuEntry[i].x,menuEntry[i].y,menuEntry[i].txt,c_white,c_white,c_white,c_white,1)
    }
    else
        draw_text_color(menuEntry[entrySelected].x,menuEntry[entrySelected].y,menuEntry[entrySelected].txt,c_black,c_black,c_black,c_black,.15)
}
   //draw the arrow
if(inFocus &amp;&amp; numEntries &gt; 0)
    {
    if (arrowx &gt; 0 &amp;&amp; arrowy &gt; 0)
        {
        if (keyboard_check_direct(vk_enter))
        {
            
            arrow = draw_sprite(spr_marrow,1,arrowx,arrowy)
            draw_text_color(menuEntry[entrySelected].x,menuEntry[entrySelected].y,menuEntry[entrySelected].txt,c_dkgray,c_dkgray,c_dkgray,c_dkgray,.60)
            
        }
        else
        {
            draw_sprite(spr_marrow,2,arrowx+2,arrowy+2)
            arrow = draw_sprite(spr_marrow,0,arrowx,arrowy)
            
        }
        }
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
