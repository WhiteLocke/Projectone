<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_persistent = false

//tmp variable
playing = false
tokill = 0

/* A queue for our action menus */
menuQueue = ds_queue_create()
battleMenuActive = false

/* A queue for our actions */
actionQueue = ds_queue_create()
actionActive = false

/* TODO: Choose the enemies */
enemies[0] = instance_create(200,200,obj_enemy_battle)
enemies [1] = instance_create(200,100,obj_enemy_battle2)
enemies [2] = instance_create(300,100,obj_enemy_battle2)
numEnemies = 3


/* Who is active? 
    A positive number represents the character active
    (i.e., Player.party[activeAlly] tells us who is acting right now
    and enemies[activeEnemy] tells us which enemy is acting
    
    if activeAlly = -1, an enemy is acting, and vice versa. We will start the battle with 
    random initiative
    
    TODO
*/

allyActive = 0
enemyActive = -1

/* Set the characters in appropriate spots BOTH OF THESE SPRITES
ARE DWARVES AND THERE ARE ONLY TWO OF THEM BUT I THINK THIS IS CLOSE*/
/* We'll give all characters random starting values for initiative */
for(var i = 0; i &lt; Player.numPartyMembers; i++){
    Player.party[i].x = .75*room_width+(i*16)
    Player.party[i].y = .3*room_height+20+(i*60)
    Player.party[i].currentInitiative = irandom(MAX_INITIATIVE)
}

/* Setup the status menu */

statusX = room_width*.35
statusY = (room_height/3)+(room_height/3)
statusWidth = room_width*.65
statusHeight = room_height/3

/* enemy menu */
enemyMenuX = 0
enemyMenuY = (2/3)*(room_height)
enemyMenuWidth = room_width*.35
enemyMenuHeight = room_height/3
    


/* Spawn help text box */
instance_create(192,room_height-32,obj_battle_help_box)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Death gasp</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ALARMS EVERYWHERE HAHA Init bar</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* TODO: Recognize end of battle */
for(var i = 0; i &lt; numEnemies; i++){
    if(enemies[i].currentHP &lt; 1){
        {
             enemies[i].alarm[1] = 24
            }
           
            //remove the enemy from our list
        for(var j = i; j &lt; numEnemies-1; j++)
        {
            enemies[j] = enemies[j+1]
        }
        
        numEnemies--
        
        //Need to stop the battle
        /* okay so stopping the battle isn't so simple as all that.
        first, any actions not completed will fuck things up as they try to complete in
        a void. So, everything needs to be stopped.
        BUT the battle controller still finishes this step, so player and shit needs to
        exist or it will be confused.
        Finally, the players need to be persistent, so they need to be kicked back
        online before the shit leaves this room. Below is my best shot at a solution for now.*/
        
        if(numEnemies = 0)
        {    
            instance_deactivate_all(false)
            instance_activate_object(Player)
            instance_activate_object(obj_character_noname)
            instance_activate_object(obj_character_you)
            room = walking_test_tile_final
        }
    }
}
        
/* Spawn battle menu 
    this needs to be done elsewhere probably, based on speed
    but lets just spawn a menu for the first party member for now
*/
if(!ds_queue_empty(menuQueue) and !battleMenuActive)
{
    var menuToSpawn = ds_queue_dequeue(menuQueue)
    instance_create(x,y,menuToSpawn)
    battleMenuActive = true
    allyActive = menuToSpawn.owningCharacter
    audio_play_sound (snd_dbeep,1,false)
}
        
    
/* Calculate speed increment for party*/
for(var i = 0; i &lt; Player.numPartyMembers; i++){
    if(Player.party[i].currentInitiative &lt; MAX_INITIATIVE &amp;&amp; Player.party[i].actionFinished = true)
    {
        Player.party[i].currentInitiative += scr_initiative_algorithm(Player.party[i].agility)
        // if they are now over initiative, spawn them a menu
        if(Player.party[i].currentInitiative &gt;= MAX_INITIATIVE)
        {
            ds_queue_enqueue(menuQueue,Player.party[i].battleMenuObject)
            
            //TODO: What is this doing? This is for the animation of the initiative bar.
            //it is working, trust me
            alarm[0] = 3
        }   
        
    }   
}

/* Now for enemies */
for(var i = 0; i &lt; numEnemies; i++){
        if(enemies[i].currentInitiative &lt; MAX_INITIATIVE &amp;&amp; enemies[i].actionFinished = true)
        {
            enemies[i].currentInitiative += scr_initiative_algorithm(enemies[i].agility)
            
        // if an enemy is at max initiative, queue up an action
        if(enemies[i].currentInitiative &gt;= MAX_INITIATIVE)
        {
            //TODO
            ds_queue_enqueue(actionQueue,enemies[i].action)
        }
        }
        
}

/* Execute any actions */
if(!ds_queue_empty(actionQueue) and !actionActive)
{
    action = ds_queue_dequeue(actionQueue)
    actionActive = true
    if(action.attacker.monster != true){       
        script_execute(action.script,action)
        }
    //had to set an alarm first when monster attacks to make shit less confusing for player
    else{
        action.attacker.attacking = true
        action.attacker.actionFinished = false
        }
    
}
        
/* Bring up the pause menu */
if(keyboard_check_pressed(vk_shift))
    instance_create(x,y,obj_selectmenu)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* Draw the character status box */
draw_sprite_stretched(spr_menu,0,statusX,statusY,statusWidth,statusHeight);
draw_sprite_stretched(spr_menu,0,enemyMenuX,enemyMenuY,enemyMenuWidth,enemyMenuHeight);
draw_set_font(f_menuW)

for(var i = 0; i &lt; Player.numPartyMembers; i++)
{
    /* Draw the name, hp mp*/
    hpString = "HP: " + string(Player.party[i].currentHP)+" / "+string(Player.party[i].maxHP)
    mpString = "MP: " + string(Player.party[i].currentMP)+" / "+string(Player.party[i].maxMP)
    draw_text_colour(statusX+34,statusY+13+50*i,Player.party[i].name,c_black,c_black,c_black,c_black,1)
    draw_text_colour(statusX+32,statusY+11+50*i,Player.party[i].name,c_white,c_white,c_white,c_white,1)
    draw_set_halign(fa_right)
    draw_text_colour(room_width-18,statusY+13+50*i,hpString+"    "+mpString,c_black,c_black,c_black,c_black,1)
    draw_text_colour(room_width-20,statusY+11+50*i,hpString+"    "+mpString,c_white,c_white,c_white,c_white,1)
    draw_set_halign(fa_left)
    
    /* Draw the bar */
    draw_sprite_stretched(spr_gaybar,0,statusX+32,statusY+39+50*i,.9*statusWidth,sprite_get_height(spr_redbar))
    
    /* Draw the initiative */
    draw_sprite_stretched(spr_yellowbar,0,statusX+32,statusY+39+50*i,(Player.party[i].currentInitiative/65535)*(.9*statusWidth),sprite_get_height(spr_redbar))
    
    if(Player.party[i].currentInitiative &gt;= MAX_INITIATIVE)
    {
    draw_sprite_stretched(spr_whitebar,0,statusX+32,statusY+39+50*i,.9*statusWidth+5,sprite_get_height(spr_redbar))
    
    
        if (alarm[0] = -1)
            draw_sprite_stretched(spr_bluebar,0,statusX+32,statusY+39+50*i,.9*statusWidth+5,sprite_get_height(spr_redbar))
        
    }
}

for(var i = 0; i &lt; numEnemies; i++)
{
    
    draw_text_colour(enemyMenuX+34,enemyMenuY+18+32*i,enemies[i].name,c_black,c_black,c_black,c_black,1)
    draw_text_colour(enemyMenuX+32,enemyMenuY+16+32*i,enemies[i].name,c_white,c_white,c_white,c_white,1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
