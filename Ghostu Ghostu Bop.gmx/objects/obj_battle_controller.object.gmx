<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

//tmp variable
playing = false

/* A queue for our action menus */
menuQueue = ds_queue_create()
battleMenuActive = false

/* A queue for our actions */
actionQueue = ds_queue_create()
actionActive = false

/* TODO: Choose the enemies */
enemies[0] = instance_create(200,200,obj_enemy_battle)
numEnemies = 1


/* Who is active? 
    A positive number represents the character active
    (i.e., Player.party[activeAlly] tells us who is acting right now
    and enemies[activeEnemy] tells us which enemy is acting
    
    if activeAlly = -1, an enemy is acting, and vice versa. We will start the battle with 
    random initiative
    
    TODO
*/

allyActive = 0
enemyActive = -1

/* Set the characters in appropriate spots BOTH OF THESE SPRITES
ARE DWARVES AND THERE ARE ONLY TWO OF THEM BUT I THINK THIS IS CLOSE*/
/* We'll give all characters random starting values for initiative */
for(var i = 0; i &lt; Player.numPartyMembers; i++){
    Player.party[i].x = .75*room_width+(i*16)
    Player.party[i].y = .3*room_height+20+(i*60)
    Player.party[i].currentInitiative = irandom(MAX_INITIATIVE)
}

/* Setup the status menu */

statusX = room_width*.35
statusY = (room_height/3)+(room_height/3)
statusWidth = room_width*.65
statusHeight = room_height/3

/* enemy menu */
enemyMenuX = 0
enemyMenuY = (2/3)*(room_height)
enemyMenuWidth = room_width*.35
enemyMenuHeight = room_height/3
    


/* Spawn help text box */
instance_create(192,room_height-32,obj_battle_help_box)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* TODO: Recognize end of battle */
for(var i = 0; i &lt; numEnemies; i++){
    if(enemies[i].currentHP &lt; 1){
        with(enemies[i])
            instance_destroy()
        
            //remove the enemy from our list
        for(var j = i; j &lt; numEnemies-1; j++)
        {
            enemies[j] = enemies[j+1]
        }
        
        numEnemies--
        
        //Need to stop the battle
        if(numEnemies = 0)
        {    
           /* audio_stop_all()
            audio_play_sound(fanfare,1,true)
            playing = true*/
            show_message("Battle done!")
            game_end()
        }
    }
}
        
/* Spawn battle menu 
    this needs to be done elsewhere probably, based on speed
    but lets just spawn a menu for the first party member for now
*/
if(!ds_queue_empty(menuQueue) and !battleMenuActive)
{
    var menuToSpawn = ds_queue_dequeue(menuQueue)
    instance_create(x,y,menuToSpawn)
    battleMenuActive = true
    allyActive = menuToSpawn.owningCharacter
}
        
    
/* Calculate speed increment */
for(var i = 0; i &lt; Player.numPartyMembers; i++){
    if(Player.party[i].currentInitiative &lt; MAX_INITIATIVE &amp;&amp; Player.party[i].actionFinished = true)
    {
        Player.party[i].currentInitiative += scr_initiative_algorithm(Player.party[i].agility)
        // if they are now over initiative, spawn them a menu
        if(Player.party[i].currentInitiative &gt;= MAX_INITIATIVE)
            ds_queue_enqueue(menuQueue,Player.party[i].battleMenuObject)
    }
        
}

/* Execute any actions */
if(!ds_queue_empty(actionQueue) and !actionActive)
{
    action = ds_queue_dequeue(actionQueue)
    script_execute(action.script,action)
    actionActive = true

}
        
/* Bring up the pause menu */
if(keyboard_check_pressed(vk_shift))
    instance_create(x,y,obj_selectmenu)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Draw the character status box */
draw_sprite_stretched(spr_menu,0,statusX,statusY,statusWidth,statusHeight);
draw_sprite_stretched(spr_menu,0,enemyMenuX,enemyMenuY,enemyMenuWidth,enemyMenuHeight);
draw_set_font(f_battleStatus)

for(var i = 0; i &lt; Player.numPartyMembers; i++)
{
    /* Draw the name, hp mp*/
    hpString = "HP: " + string(Player.party[i].currentHP)+" / "+string(Player.party[i].maxHP)
    mpString = "MP: " + string(Player.party[i].currentMP)+" / "+string(Player.party[i].maxMP)
    draw_text(statusX+32,statusY+16+50*i,Player.party[i].name)
    draw_set_halign(fa_right)
    draw_text(room_width-20,statusY+16+50*i,hpString+"    "+mpString)
    draw_set_halign(fa_left)
    
    /* Draw the bar */
    draw_sprite_stretched(spr_redbar,0,statusX+32,statusY+39+50*i,.9*statusWidth,sprite_get_height(spr_redbar))
    
    /* Draw the initiative */
    draw_sprite_stretched(spr_yellowbar,0,statusX+32,statusY+39+50*i,(Player.party[i].currentInitiative/65535)*(.9*statusWidth),sprite_get_height(spr_redbar))
}

for(var i = 0; i &lt; numEnemies; i++)
{
    draw_text(enemyMenuX+32,enemyMenuY+16+32*i,enemies[i].name)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
